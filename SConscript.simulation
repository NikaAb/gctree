#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''Simulate tree'''
import os
from nestly import Nest
from nestly.scons import SConsWrap
# the following must be exported by parent SConstruct/SConscript
Import('env outdir naive mutability substitution lambda_ lambda0 r n frame T')

nest = Nest()
w = SConsWrap(nest, outdir, alias_environment=env)

w.add_aggregate('aggdat', list)

# Initialize our first nest level, just random simulation reruns, same params
w.add('runs', range(1,11))

@w.add_target()
def gctree_sim(outdir, c):
    '''
    GCtree simulation
    NOTE: xvfb-run is needed because of issue https://github.com/etetoolkit/ete/issues/101
    '''
    frame_arg = ' --frame {} '.format(frame) if frame is not None else ''
    time_arg = ' --T {} '.format(T) if T is not None else ''
    return env.Command([os.path.join(outdir, 'gctree.simulation.fasta'),
                     os.path.join(outdir, 'gctree.simulation.collapsed_tree.p'),
                     os.path.join(outdir, 'gctree.simulation.collapsed_tree.svg'),
                     os.path.join(outdir, 'gctree.simulation.log')],
                     [mutability, substitution],
                     'xvfb-run -a python bin/gctree.py simulate '+naive+
                     ' ${SOURCES[0]} ${SOURCES[1]}'+
                     ' --outbase '+os.path.join(outdir, 'gctree')+
                     ' --lambda {} --lambda0 {} --r {} --n {}'.format(lambda_, lambda0, r, n)+
                     frame_arg+
                     time_arg+
                     ' > ${TARGETS[3]}')

@w.add_target()
def gctree_infer(outdir, c):
    '''now do inference on the simulation results'''
    fasta = c['gctree_sim'][0]
    naiveID = 'naive' # this is what the simulation routine names the naive
    return SConscript('SConscript.inference', exports='env frame fasta outdir naiveID')

@w.add_target()
def gctree_validate(outdir, c):
    '''do validation'''
    tgt = env.Command([os.path.join(outdir, 'gctree.validation.tsv'),
                       os.path.join(outdir, 'gctree.validation.pdf'),
                       os.path.join(outdir, 'gctree.validation.log')],
                      [c['gctree_sim'][1], c['gctree_infer'][0]],
                      'xvfb-run -a python bin/gctree.py validate $SOURCES --outbase '+os.path.join(outdir, 'gctree')+' > ${TARGETS[2]}')
    c['aggdat'].append(tgt[0])
    return tgt

w.pop('runs')

@w.add_target()
def aggregate(outdir, c):
    '''aggregate validation results'''
    tgt = env.Command([os.path.join(outdir, 'validaggreg.tsv'),
                       os.path.join(outdir, 'validaggreg.pdf'),
                       os.path.join(outdir, 'validaggreg.log')],
                      c['aggdat'],
                      'python bin/validaggreg.py $SOURCES --outbase '+os.path.join(outdir, 'validaggreg')+' > ${TARGETS[2]}')
    env.AlwaysBuild(tgt)
    return tgt
